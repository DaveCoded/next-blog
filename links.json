[
    {
        "ids": [
            "Avoiding font piracy on a Netlify-deployed static site",
            "my post on font piracy",
            "the great font heist"
        ],
        "slug": "github-font-piracy",
        "completion": "spark",
        "content": "\n<Dropcap>\n  Self-hosting web fonts is the best font-loading strategy\n  for many websites. Done correctly, it yields the best\n  performance results and gives you the most options and\n  flexibility. The only reason to avoid it might be that you\n  get too much control, which puts the onus of understanding\n  how to optimise web fonts all on you. But that's another\n  matter entirely.\n</Dropcap>\n\nAnd the idea is simple. [[Put the font files]] in a directory that\nserves assets to the client - usually `public/`. Then, in a css\nfile, load the fonts with `@font-face`. The details of the implementation\nare outside of the scope of this post, but I would recommend\nthis [CSS tricks article](https://css-tricks.com/snippets/css/using-font-face/)\nif you need help.\n\nThe issue with this strategy comes when you have a static site - such as the one you're on now, which is built with Next.js - deployed on Netlify.\n(It's a fantastic service that I'm grateful for; this isn't really a critique.) The common way <MarginNote id={1}>Possibly the best way, or the only way.\nCertainly the path of least resistance and one with many DX benefits.</MarginNote> to deploy static sites on Netlify, is to configure a branch\nto watch on GitHub. Any merge into that branch triggers a deployment and, in a flash, the new version of your site is built and deployed\nto the web.\n\nIn this model, your assets - fonts, images, favicon etc. - are also usually kept in a `public/` or `static/` directory. And since Netlify\ngets your project files from GitHub, those assets that you're choosing to host also need to go on GitHub.\n\n## How does font piracy fit in here?\n\nDo you see the issue? Any assets, in this case fonts, pushed to a GitHub repository are now free for others to\ndownload. Which results in theft from a font foundry, and the hard work of a dedicated typographer <MarginNote id={2}>Let's\nface it, they're all dedicated. Do you know how much work creating a font is?!</MarginNote> earns them nothing.\n\n## The ship has already sailed. Do the right thing anyway.\n\nIn truth, this has already happened so many times that, short of a catastrophic event such as the sudden\ndisappearance of GitHub as if waking from a beautiful dream, there's nothing we can do about it. It's too\nlate to prevent font piracy. Which makes it all hte easier to go with the crowd and pop your fonts up\non GitHub because it's just easier. But should you?\n\nThough it might no longer help the font foundries to do so, I think there's still some value in finding\nanother way. I doubt that anyone will take great notice, so you won't get bonus virtue-signalling points.\nAnd nobody will thank you, so you won't benefit from a heady philanthropic buzz. But, and I think this is\n_much more important_, you will be sending a signal to yourself. By bravely going down with this sinking\nship (I should be making more of extending the piracy metaphor shouldn't I?), you will remind yourself that\n\n> while I frenetically mash away at my keyboard; while I Make. Magic. Happen; while I design systems that\n> may indeed make the world a little bit better, it's worth always asking this: is what I'm doing right?\n\nI'm not interested in an ethical debate here. You're a big boy/girl/other now and you have to decide what's\nright for yourself. But once you do, you've got to act accordingly. Even when it's inconvenient or even\ncounter to your ambitions of world domination. And in the case of accidentally stealing fonts on your\nNetlify-hosted static site, it's not that hard.\n\n## How to not steal fonts (finally)\n\nAll credit for this approach goes to Fabian Schultz and his [article on Dev.to](https://dev.to/fabe/avoiding-font-piracy-on-github--netlify-198f).\nHis solution is clever and simple (as the best often are):\n\n1. Host your fonts on a CDN in a .zip file\n2. In your build step, fetch the zip, and pop it in your public directory\n3. Unzip it there, then delete the zip\n4. Don't forget to put your fonts in your .gitignore!\n\n### Pop this in your package.json scripts\n\n```json\n\"scripts\": {\n    ...\n    \"fonts:fetch\": \"wget -O Fonts.zip $SECRET_FONTS_URL; unzip Fonts.zip -d ./public; rm Fonts.zip\",\n    \"build\": \"npm run fonts:fetch && next build\",\n},\n```\n\n### Netlify environment variables\n\n`$SECRET_FONTS_URL` is an environment variable. You're going to have to tell Netlify about it. To do so,\ngo to your site's dashboard on Netlify, and go to **Site settings > Build & deploy > Environment**. There,\nyou can add the `SECRET_FONTS_URL` (without the `$` dollar sign!) and set it to a url where you've hosted\nyour fonts zip on a CDN. Ta-da 🎉\n",
        "outboundLinks": [],
        "inboundLinks": []
    },
    {
        "ids": [
            "Notes on Database Normalization",
            "how to do database normalization",
            "on database normalization"
        ],
        "slug": "database-normalization-notes",
        "completion": "spark",
        "content": "\n<Dropcap>\n  Normalization is a database design methodology. Proposed\n  by Edgar F. Codd in 1970 - and subsequently developed in\n  the following years with some collaborators - database\n  normalization gives us a framework for structuring\n  relational (usually) databases. Its aim is to reduce{' '}\n  <a href=\"#data-redundancy\">data redundancy</a>, and to\n  improve <a href=\"#data-integrity\">data integrity</a>. This\n  is done by adhering to the \"<strong>normal forms</strong>\n  \", of which there are <em>technically</em> 10 (or 11 if you\n  count \"Unnormalized form\", which I don't). Fortunately, however,\n  a database is generally considered to be normalized by <strong>\n    following the first three norms\n  </strong>.\n</Dropcap>\n\n## Data redundancy\n\nData _redundancy_ is the duplication of data in multiple records. Whether the data is recorded in the same\ntable, or represented across multiple tables, it is still considered redundant. There are **two reasons** we\nwant to avoid data redundancy:\n\n1. It uses unnecessary resources. There is more data to store in the first place. That means our data takes\n   up more space, and it will take longer to query it.\n2. It can easily lead to corrupted data, thanks to <a href=\"#update-anomaly\">update anomalies</a>.\n\n## Data integrity\n\nData _integrity_ concerns its reliability over time. [[conditionally adding properties to objects]] Imagine we have a database of users. Each user has an\nemail address stored. If I query for Hans Andersen's email address and the database returns\nthelittlemermaid<span>@</span>fairytales.com, I want to know that running the same query will return me the same\naddress in five years' time (assuming that Hans's address is not deliberately changed).\n\nThis predicatability can be compromised by duplicate [[Avoiding font piracy on a Netlify-deployed static site]] data or storing data with invalid types, to name a couple.\nFor example, if you want to store some phone numbers, it might be a bad idea to use the `VARCHAR` type. This\nwould allow non-numeric characters to be listed, and therefore invalid phone numbers. [[conditional spread trick]]\n\n## 3 kinds of anomaly\n\nThere are three main dangers for databases that have not been normalized:\n\n### Update anomalies\n\nOne issue with having the same data expressed in multiple places, is that it has to be updated in multiple places.\nSo if for some reason an update is only partially successful, some records may update while others will not.\nIt will then be possible to get two different answers to the same query.\n\n### Insertion anomalies\n\nAn insertion anomaly is when you want to add a new record to a table, but can't because of the way the data has\nbeen structured. To repurpose [[conditional spread trick]] the example given on Wikipedia, consider this table of faculty members:\n\n<FacultyTable />\n\nEach faculty member has a unique ID, a name, the date they were hired and a course code. Now imagine we have a new\nmember of the faculty starting so we need to make a new record. Marston Porkhabit will be give a unique ID, their\nname will be entered and their start date, 01/09/2021, will be recorded. But, for various reasons that are none\nof your business actually, they are working on their own research initially. They are not currently taking a course.\nIt will be impossible to add a record for Marston unless we record `null` for the Course Code, which may be\nundesirable.\n\n### Deletion anomalies\n\nA deletion anomaly occurs when deleting data holding one fact will also delete data holding another fact.\nThe Faculty Table suffers from this. It is not possible to delete a course without also removing a faculty member;\nunless, again, we are able to set the Course Code to `null`.\n\n## Extensions should require minimal redesign\n\nThis is just a principle that is worth mentioning before we get onto the normal forms.\nYou should be able to add new types of data to a database without changing its structure too much.\nOtherwise, each change in structure could potentially break existing applications that interact with the database.\n\n## The normal forms\n\n#### 1NF\n\n- Every record (row) must be unique\n- Each cell contains only one value\n\n#### 2NF\n\n- All attributes (columns that aren't keys) are dependent on the keys\n- In other words, if you have a column or columns that are related to each other, or some other data,\n  but not the primary key, then they belong in a different table\n\n#### 3NF\n\n- All columns/fields can be determined only by the key in the table, and not by any other column\n\n#### BCNF (Boyce-Codd Normal Form)\n\nBCNF is a slightly stronger version of 3NF developed to address a few edge cases. Its definition is\nslightly complex and beyond the scope of this introduction. In short, a relation (table) will be in\nBCNF if it satisfies 3NF and does not contain any overlapping candidate keys.\n\n#### 4NF\n\n- No multi-valued dependencies\n- Let's assume your primary key is a customer ID. What if that customers has multiple addresses?\n  Or multiple credit cards? Multiple subscriptions?\n- Rather than storing those _multi-valued dependencies_ on the Customer table, they can go in their\n  own **address**, **credit_card** and **subscription** tables\n- That way, we prevent obvious update anomalies\n\n## Things not covered\n\nDatabase normalization is an enormous topic. Since it is the subject of multiple hefty textbooks, please\nbe aware that we have not even scratched the surface here.\n\nIt might be useful to be aware that there are disagreements over which normal forms are useful to adhere to.\nI have seen it suggested on Stack Overflow that one should aim for 5NF and use an algorithm to achieve it.\nOthers consider 3NF to be more than enough. The professors taking CS186 at Berkley consider 2NF and 3NF to\nbe only of historical interest, preferring to focus on 1NF and BCNF. Though, presumably, adhering to BCNF\nimplies also covering 2NF and 3NF!\n\nThere are also cases in which normalization is less desirable. Splitting your functional dependencies over\nmultiple tables can require joins, which results in slower queries. In fact, there is a process called\ndenormalization that seeks to address the cases in which this is a problem for certain business cases.\n\nAnd these are just, of the things that I know I haven't covered, those that I have bothered to note! So\nplease make sure that, if you have learned anything here, you consult other resources to learn more about\ndatabase normalization 👍\n",
        "outboundLinks": [
            {
                "matchedId": "conditionally adding properties to objects",
                "title": "How to conditionally add a property to an object",
                "slug": "conditional-object-properties",
                "completion": "bonfire",
                "excerpt": "If you have an object literal in JavaScript, and you wantto add a property to it only if some condition is met,you're in luck. The neatest way is with the spreadoperator, introduced in ES6.```JavaScript title=conditional-property.jsconst isConditional = true;const myObject = {  t..."
            },
            {
                "matchedId": "Avoiding font piracy on a Netlify-deployed static site",
                "title": "Avoiding font piracy on a Netlify-deployed static site",
                "slug": "github-font-piracy",
                "completion": "spark",
                "excerpt": "Self-hosting web fonts is the best font-loading strategy for many websites. Done correctly, it yields the best performance results and gives you the most options and flexibility. The only reason to avoid it might be that you get too much control, which puts the onus of understand..."
            },
            {
                "matchedId": "conditional spread trick",
                "title": "How to conditionally add a property to an object",
                "slug": "conditional-object-properties",
                "completion": "bonfire",
                "excerpt": "If you have an object literal in JavaScript, and you wantto add a property to it only if some condition is met,you're in luck. The neatest way is with the spreadoperator, introduced in ES6.```JavaScript title=conditional-property.jsconst isConditional = true;const myObject = {  t..."
            },
            {
                "matchedId": "conditional spread trick",
                "title": "How to conditionally add a property to an object",
                "slug": "conditional-object-properties",
                "completion": "bonfire",
                "excerpt": "If you have an object literal in JavaScript, and you wantto add a property to it only if some condition is met,you're in luck. The neatest way is with the spreadoperator, introduced in ES6.```JavaScript title=conditional-property.jsconst isConditional = true;const myObject = {  t..."
            }
        ],
        "inboundLinks": []
    },
    {
        "ids": [
            "How to conditionally add a property to an object",
            "conditionally adding properties to objects",
            "conditional spread trick"
        ],
        "slug": "conditional-object-properties",
        "completion": "bonfire",
        "content": "\nIf you have an object literal in JavaScript, and you want\nto add a property to it only if some condition is met,\nyou're in luck. The neatest way is with the spread\noperator, introduced in ES6.\n\n```JavaScript title=conditional-property.js\nconst isConditional = true;\n\nconst myObject = {\n    type: 'excellent',\n    size: 'enormous',\n    aromas: ['jasmine', 'honeysuckle', 'puddle water'],\n    ...(isConditional && { optionalProperty: true })\n}\n```\n\nAs you can see, how this actually works syntactically, is by spreading an object - `{ optionalProperty: true }` -\ninto our existing object literal if a certain condition is met. Handy stuff 🤚\n",
        "outboundLinks": [],
        "inboundLinks": []
    },
    {
        "ids": [
            "Uploading files with React and Typescript",
            "styling file upload inputs",
            "how to upload files in React",
            "this is a cool alias"
        ],
        "slug": "pretty-file-upload-in-react",
        "completion": "flame",
        "content": "\n<Dropcap>\n  Working on the frontend can often feel a bit hacky. It can\n  be difficult to identify what the \"right\" way to do\n  something is. When I have to stray from the affordances of\n  the native web platform, I get a strange feeling, an\n  instinct instilled in me by listening to those who know\n  far more about it, that I'm wading into murky swampland. I\n  know that sounds unpleasant. It certainly can be. But, I\n  also think it's a healthy response. It's when we feel free\n  to do what we like without fear of consequence that we\n  build things for the web that are inaccessible,\n  misleading, or downright foolish.\n</Dropcap>\n\nThat said, straying is sometimes necessary. Whether to bring a design together or to improve upon existing patterns\nby overcoming the limitations of the web - getting fancy, now, I know. One example I had at work, was needing to\nhandle file uploading. HTML's native `<input type=\"file\" />` element is great, but almost impossible to style\nconsistently across browsers. It looks like this by default. It's a real one, go ahead and click it. If you upload\na file, you'll see that the label text automatically updates to reflect that: [[cool array tricks]]\n\n<div\n  style={{\n    display: 'flex',\n    justifyContent: 'center',\n    marginBottom: '1.5rem'\n  }}\n>\n  <input type=\"file\" />\n</div>\n\nPretty nifty, actually. Not beautiful though. And, while it's often good enough for a form which might collect the file(s)\nuploaded by a user and then POST to a backend, sometimes we want to do something with a file on the frontend. Imagine\nyou're building some design software, or image manipulation software, or anything where a user might want to upload an image,\npreview it in place, but not necessarily save it straight away.\n\nNow pretend your use case is exactly the example I'm about to show and learn from it. Thanks 👍\n\n## Doing it in React and Typescript\n\nTo have complete control over the file input's styling, we're actually going to hide it completely, and use a button instead.\nBy giving the file input a `ref`, we'll be able to call its _onChange_ event from the button's _onClick_ event:\n\n```tsx title=UploadButton.tsx\nimport React, { useRef, ChangeEvent } from 'react'\n\nconst UploadButton = () => {\n  const uploadRef = useRef<HTMLInputElement>(null)\n  const handleUpload = () => {\n    console.log('File upload input clicked...')\n  }\n\n  return (\n    <>\n      <button onClick={() => uploadRef.current?.click()}>\n        Upload file\n      </button>\n\n      <input\n        type=\"file\"\n        ref={uploadRef}\n        onChange={handleUpload}\n        style={{ display: 'none' }}\n      />\n    </>\n  )\n}\n```\n\n<div\n  style={{\n    fontSize: 'var(--text-body)',\n    lineHeight: 1.5,\n    fontStyle: 'italic',\n    background: 'rgb(255 247 0 / 20%)',\n    border: '3px solid rgb(209 153 0 / 31%)',\n    padding: 'var(--space-md) var(--space-lg)',\n    borderRadius: '6px',\n    marginBottom: 'var(--space-lg)'\n  }}\n>\n  Note that, if you're using Typescript, the useRef hook\n  takes a generic in which you can tell the compiler what\n  kind of element to expect. That tripped me up when I first\n  tried this.\n</div>\n\nExcellent. Now we have a button to style however we want. But you probably want to do something\na little more complex than logging something to the console. Let's see how to handle the actual\nfile upload on the frontend.\n\n### File attributes and type handling\n\nWhen triggering the input's change event, the crucial property that comes on the event object\nholds an array: `event.target.files`. It's an array because adding the `multiple` attribute allows\na user to upload more than one file. Each item (file) in this array has four useful properties, and\nfour methods for manipulating the file Blob.\n\n<img src=\"/images/file-properties.png\" />\n\nYou'll usually want to check the file `type` at this point and show an error if a user has uploaded\na file with an extension you're not supporting. Adding the `accept` attribute to the input looks like\nit disables the file types you don't list, but clicking on options (on Mac), then selecting \"All files\"\nfrom the dropdown will allow you to upload any file type. Try it out with this input that recommends\n.png and .jpeg files, but doesn't prevent them `<input type=\"file\" accept=\"image/png, image/jpeg\" />`\n\n<div\n  style={{\n    display: 'flex',\n    justifyContent: 'center',\n    marginBottom: '1.5rem'\n  }}\n>\n  <input type=\"file\" accept=\"image/png, image/jpeg\" />\n</div>\n\n### Using the FileReader api\n\nOnce that's taken care of, we can read the uploaded file and do whatever we like with it. This example\nassumes we're handling only one file. For multiple, you could loop through `e.target.files`. It also\nexpects a .csv file from the user.\n\n```tsx\nconst handleUpload = (e: ChangeEvent<HTMLInputElement>) => {\n  if (e.target.files === null) {\n    return\n  }\n  const file = e.target.files[0]\n\n  if (file) {\n    if (file.type !== 'text/csv') {\n      console.error('Please upload a .csv file')\n    }\n\n    const fileReader = new FileReader()\n    fileReader.onload = (event) => {\n      const contents = event?.target?.result\n      // do something with the file contents here\n    }\n\n    e.target.value = ''\n    fileReader.readAsText(file)\n  } else {\n    console.error(\n      'File could not be uploaded. Please try again.'\n    )\n  }\n}\n```\n\nAfter creating an instance of FileReader, we can handle the file contents found on `event.target.result`\nin that instance's `onload` event. This will later be executed when we call the `readAsText` method and\npass it our file. You might have noticed that before doing so, I've set `e.target.value` back to an empty\nstring. This allows another file to be uploaded afterwards, which will replace the original file on the\ninput. Here's the whole thing all together with some better error handling:\n\n```tsx title=UploadButton.tsx\nimport React, { useRef, useState, ChangeEvent } from 'react'\n\nconst UploadButton = () => {\n  const [uploadError, setUploadError] = useState('')\n  const uploadRef = useRef<HTMLInputElement>(null)\n\n  const handleUpload = (\n    e: ChangeEvent<HTMLInputElement>\n  ) => {\n    if (e.target.files === null) {\n      return\n    }\n    const file = e.target.files[0]\n\n    if (file) {\n      if (file.type !== 'text/csv') {\n        setUploadError('Please upload a .csv file')\n      }\n\n      const fileReader = new FileReader()\n      fileReader.onload = (event) => {\n        const contents = event?.target?.result\n        // do something with the file contents here\n      }\n\n      e.target.value = ''\n      fileReader.readAsText(file)\n    } else {\n      setUploadError(\n        'File could not be uploaded. Please try again.'\n      )\n    }\n  }\n\n  return (\n    <>\n      {/* style this however you like */}\n      <button onClick={() => uploadRef.current?.click()}>\n        Upload file\n      </button>\n\n      <input\n        type=\"file\"\n        ref={uploadRef}\n        onChange={handleUpload}\n        style={{ display: 'none' }}\n      />\n\n      {uploadError ? <p>{uploadError}</p> : null}\n    </>\n  )\n}\n```\n",
        "outboundLinks": [
            {
                "matchedId": "cool array tricks",
                "title": "Eating your greens - ordering arrays of strings",
                "slug": "sorting-dynamic-arrays-js",
                "completion": "bonfire",
                "excerpt": "Often in code, you handle arrays of items. Sometimes you know their types but not their number. Sometimes you even know the complete list of possible values, but not their number. What if that is the case and you want to sort them in a particular order? Not alphabetically, or by..."
            }
        ],
        "inboundLinks": []
    },
    {
        "ids": [
            "Eating your greens - ordering arrays of strings",
            "how to order an array of strings",
            "cool array tricks"
        ],
        "slug": "sorting-dynamic-arrays-js",
        "completion": "bonfire",
        "content": "\n<Dropcap>\n  Often in code, you handle arrays of items. Sometimes you\n  know their types but not their number. Sometimes you even\n  know the complete list of possible values, but not their\n  number. What if that is the case and you want to sort them\n  in a particular order? Not alphabetically, or by date, or\n  from longest to shortest, or anything a computer can\n  calculate. You want to sort them by something that seems,\n  at least to a dumb computer, entirely arbitrary\n  (laughable, even). Alphabetically by which letter maps to\n  your favourite numbers between 1 and 26. Or according to a\n  list of label names for the form inputs in a UI? Yeah,\n  that one. That's what happened to me.\n</Dropcap>\n\n## My specific use case\n\nI was building a form at work, but I didn't know exactly what all the inputs were going to be. I knew what they _could_ be - it's\nmy job to, after all - but the specific subset of all possibilities depended on a user's previous input into the application. Pesky user 🙄\nDynamically building a form is fine, but what about the order of the inputs? There are established patterns to follow here.\nIt is confusing to ask for a user's grandmother's vet's email address before cordially asking for their name, for instance.\n\n### Vegetables as an example\n\nLet's take vegetables as an example. We [[Uploading files with React and Typescript]] are expecting an array of vegetables. We know all the possible vegetables, but we\ndon't know the subset, or what order they'll come in. _But_, being unnecessarily opinionated programmers, we know the order we absolutely\nmust display them in. First, let's make an array describing our preferred order, given all possible vegetables that exist in the app:\n\n```JavaScript title=veggies.js\nconst idealVegOrder = [\n  'Daikon',\n  'Broccoli',\n  'Runner beans',\n  'Sweetcorn',\n  'Carrots',\n  'Onions'\n]\n```\n\n### The chaos of actual data\n\nWhat if the user didn't put little ticks in _all_ the checkboxes earlier in the app confirming that they love of _all_ of these vegetables?\nAnd what if the way we get their inconvenient subset of vegetables doesn't keep them in the neat order we absolutely require? Say this is\nthe array of vegetables that our user fancies:\n\n```JavaScript title=veggies.js\nconst userVeggies = ['Broccoli', 'Carrots', 'Daikon', 'Onions'];\n```\n\n### Daikon must come first! 😡\n\nDon't worry, I'll stop rambling and give you the snippet now. Here's how we can order the chaos of user data according to our nirvana\nof cruciferous order:\n\n```JavaScript title=veggies.js\nconst sortVeggies = (userVeggiesArray) => {\n  const idealVegOrder = [\n    'Daikon',\n    'Broccoli',\n    'Runner beans',\n    'Sweetcorn',\n    'Carrots',\n    'Onions'\n  ];\n\n  return userVeggiesArray.sort(\n    (a, b) => idealVegOrder.indexOf(a) - idealVegOrder.indexOf(b)\n  );\n}\n\nconst userVeggies = getUserVeggies(user); // ['Broccoli', 'Carrots', 'Daikon', 'Onions']\n\nconst orderedUserVeggies = sortVeggies(userVeggies); // ['Daikon', 'Broccoli', 'Carrots', 'Onions']\n```\n\nHooray! I know this isn't going to set the internet on fire, but hopefully it will help one or two of you on your coding journeys. Peace 🌽🥦🥕\n(Who wants to [put in a proposal](https://unicode.org/emoji/proposals.html) for a Daikon emoji?)\n",
        "outboundLinks": [
            {
                "matchedId": "Uploading files with React and Typescript",
                "title": "Uploading files with React and Typescript",
                "slug": "pretty-file-upload-in-react",
                "completion": "flame",
                "excerpt": "Working on the frontend can often feel a bit hacky. It can be difficult to identify what the \"right\" way to do something is. When I have to stray from the affordances of the native web platform, I get a strange feeling, an instinct instilled in me by listening to those who know f..."
            }
        ],
        "inboundLinks": []
    },
    {
        "ids": ["Mapping a list in React: altering the last element"],
        "slug": "last-element-jsx-array",
        "completion": "bonfire",
        "content": "\n<blockquote style={{ marginTop: 0 }}>\n  <p className=\"BlogPost__Paragraph\">\n    It is a truth universally acknowledged, that a coding\n    man (woman, other) in possession of good arrays, must be\n    in want of JSX.\n  </p>\n</blockquote>\n\n<Dropcap>\n  Poor Jane. Her insightful, sensitive, entertaining work\n  has been co-opted by mysoginy, by people wanting to give\n  Colin Firth something to do, and now by yet another React\n  tutorial. She'd probably have been into Vue; maybe she'd\n  have considered rolling in the muddy frontend obscene and\n  opted for Lisp or Haskell. Never mind.\n</Dropcap>\n\n## Code that does things\n\nThis is pretty simple so I'm not going [[on database normalization]] to bang on about Austen any longer. This is mostly a reminder to myself,\nbecause although it's not overly complicated, it did trip me up for a few minutes at work, and I wasn't totally sure what to search for to unblock\nmyself. Besides, I do hope, intrepid blog-burrower (that's you, my furry little reader), that it is also useful to you.\n\n### Let's assume an array of Power Rangers\n\nPR fans (not Public Relations. They don't shout \"it's morphing time!\" do they?) will notice that the names belong to the first\nlot of Power Rangers and that I've omitted the Green guy. He [[cool array tricks]] later became the White Ranger, which I was never comfortable with. How could I be? Way\ntoo big for his boots...\n\nHere's how we could list out our heroes, putting an `<hr />` (horizontal rule) after each but the last. First, we remember that the second argument\nof JavaScript's `.map()` array function is an **index**. Then, we use it:\n\n```JavaScript title=file.jsx\nconst powerRangers = [\n  {\n    color: 'Red',\n    name: 'Jason Lee Scott'\n  },\n  {\n    color: 'Yellow',\n    name: 'Trini Kwan'\n  },\n  {\n    color: 'Black',\n    name: 'Zack Taylor'\n  },\n  {\n    color: 'Pink',\n    name: 'Kimberly Hart'\n  },\n  {\n    color: 'Blue',\n    name: 'Billy Cranston'\n  }\n]\n\nconst listOfRangers = () =>  (\n  <ol>\n    {powerRangers.map(({ color, name }, index) => (\n      <>\n        <li key={index}>\n            {name} was the {color} Ranger\n        </li>\n        {index === powerRangers.length - 1 ? null : <hr />}\n      </>\n    ))}\n  </ol>\n)\n```\n\nThat handy `<>` tag is the same as `React.Fragment`. Since we're rendering an `li` and an `hr` as siblings (for all but the last Ranger),\nwe need to wrap them in a parent element. You could opt for a `div` if you were going to use it for something. Remember to move the key\nattribute to it if you do.\n\nOf course, it doesn't need to be the last element of the array. Once you have the current index, you can do anything your bloody, pumping\nheart desires. `index === 0 ? <hr /> : null` would add an `hr` after the first element only, for instance. Anyway, happy mapping!\n",
        "outboundLinks": [
            {
                "matchedId": "on database normalization",
                "title": "Notes on Database Normalization",
                "slug": "database-normalization-notes",
                "completion": "spark",
                "excerpt": "Normalization is a database design methodology. Proposed by Edgar F. Codd in 1970 - and subsequently developed in the following years with some collaborators - database normalization gives us a framework for structuring relational (usually) databases. Its aim is to reduce data re..."
            },
            {
                "matchedId": "cool array tricks",
                "title": "Eating your greens - ordering arrays of strings",
                "slug": "sorting-dynamic-arrays-js",
                "completion": "bonfire",
                "excerpt": "Often in code, you handle arrays of items. Sometimes you know their types but not their number. Sometimes you even know the complete list of possible values, but not their number. What if that is the case and you want to sort them in a particular order? Not alphabetically, or by..."
            }
        ],
        "inboundLinks": []
    }
]
